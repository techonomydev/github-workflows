name: Python CI
on:
  workflow_call:
    inputs:
      name:
        type: string
        required: true
      python_version:
        type: string
        required: true
      pip_version:
        type: string
        required: false
        default: ">=23,<23.1"
      poetry_version:
        type: string
        required: false
        default: ">=1.4.0,<1.5"
      postgres_image:
        type: string
        required: false
        default: "postgres"
      database_protocol:
        type: string
        required: false
        default: "postgres"
      apt_extra_packages:
        type: string
        required: false
        default: ""
      region:
        type: string
        default: "eu-west-1"
    secrets:
      TECHONOMY_REPOS_GITHUB_TOKEN:
        required: true
      AWS_CODEARTIFACT_PRIMARY_ACCESS_KEY:
        required: true
      AWS_CODEARTIFACT_PRIMARY_ACCESS_SECRET:
        required: true

jobs:
  linting-and-tests:
    services:
      postgres:
        image: ${{ inputs.postgres_image }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ${{ inputs.name }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: "${{ inputs.python_version }}"
      - name: Setup ssh:// to https:// mapping with a token
        run: |
          git config --global url."https://${{ secrets.TECHONOMY_REPOS_GITHUB_TOKEN }}@github.com/".insteadOf ssh://git@github.com/
      - name: Install additional software
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libssl-dev libcurl4-openssl-dev ${{ inputs.apt_extra_packages }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_CODEARTIFACT_PRIMARY_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_CODEARTIFACT_PRIMARY_ACCESS_SECRET }}
          aws-region: ${{ inputs.region }}
      - name: Install Python dependencies
        env:
          PYCURL_SSL_LIBRARY: openssl
          POETRY_HTTP_BASIC_AWS_CODEARTIFACT_PRIMARY_USERNAME: aws
          AWS_CODEARTIFACT_PRIMARY_PYPI_REPOSITORY_URL: ${{ vars.AWS_CODEARTIFACT_PRIMARY_PYPI_REPOSITORY_URL }}
        run: |
          export AWS_CODEARTIFACT_TOKEN="$(aws codeartifact get-authorization-token --domain techonomy-dev --domain-owner 718089050198 --query authorizationToken --output text)"
          export POETRY_HTTP_BASIC_AWS_CODEARTIFACT_PRIMARY_SIMPLE_PASSWORD=$AWS_CODEARTIFACT_TOKEN
          pip3 install "pip${{ inputs.pip_version }}" "poetry${{ inputs.poetry_version }}"
          make install
      - name: Lint with flake8 (black and isort)
        run: |
          source $(poetry env info --path)/bin/activate
          make lint
      - name: Run the unit/functional testsuite
        env:
          DATABASE_URL: "${{ inputs.database_protocol }}://postgres:postgres@localhost/${{ inputs.name }}"
        run: |
          source $(poetry env info --path)/bin/activate
          make test
